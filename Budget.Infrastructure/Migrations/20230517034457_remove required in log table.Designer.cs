// <auto-generated />
using System;
using Budget.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Budget.Infrastructure.Migrations
{
    [DbContext(typeof(BudgetDbContext))]
    [Migration("20230517034457_remove required in log table")]
    partial class removerequiredinlogtable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Budget.Domain.Entities.AccountingEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("AccountingEntries");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("code");

                    b.Property<int>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("id_state");

                    b.Property<bool>("IsNeoBank")
                        .HasColumnType("bit")
                        .HasColumnName("is_neo_bank");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("IdState");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Budget.Domain.Entities.CashFlowFixed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("id_category");

                    b.Property<int>("IdOperation")
                        .HasColumnType("int")
                        .HasColumnName("id_operation");

                    b.Property<int>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("id_state");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<int>("Idperiodicity")
                        .HasColumnType("int")
                        .HasColumnName("id_periodicity");

                    b.Property<int?>("SpentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdOperation");

                    b.HasIndex("IdState");

                    b.HasIndex("IdUser");

                    b.HasIndex("Idperiodicity");

                    b.HasIndex("SpentCategoryId");

                    b.ToTable("CashFlowFixeds");
                });

            modelBuilder.Entity("Budget.Domain.Entities.FinancialProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdAccountingEntry")
                        .HasColumnType("int")
                        .HasColumnName("id_accounting_entry");

                    b.Property<int>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("id_state");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("IdAccountingEntry");

                    b.HasIndex("IdState");

                    b.ToTable("FinancialProducts");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<int>("IdFinancialProduct")
                        .HasColumnType("int")
                        .HasColumnName("id_financial_product");

                    b.Property<int>("IdIncomeCategory")
                        .HasColumnType("int")
                        .HasColumnName("id_income_category");

                    b.Property<int>("IdOperation")
                        .HasColumnType("int")
                        .HasColumnName("id_operation");

                    b.Property<int>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("idState");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("transaction_number");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("IdFinancialProduct");

                    b.HasIndex("IdIncomeCategory");

                    b.HasIndex("IdOperation");

                    b.HasIndex("IdState");

                    b.HasIndex("IdUser");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Budget.Domain.Entities.IncomeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<int>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("id_state");

                    b.HasKey("Id");

                    b.HasIndex("IdState");

                    b.ToTable("IncomeCategories");
                });

            modelBuilder.Entity("Budget.Domain.Entities.LogError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("data");

                    b.Property<DateTime>("DateLog")
                        .HasColumnType("datetime")
                        .HasColumnName("data_log");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("exception");

                    b.Property<string>("InnerException")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("inner_exception");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("key");

                    b.Property<string>("Layer")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("layer");

                    b.Property<string>("MessageError")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("message_error");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("method");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("stack_trace");

                    b.HasKey("Id");

                    b.ToTable("LogErrors");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Movement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("account_number");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("dni");

                    b.Property<int>("IdAccountingEntry")
                        .HasColumnType("int")
                        .HasColumnName("id_accounting_entry");

                    b.Property<int>("IdOperation")
                        .HasColumnType("int")
                        .HasColumnName("id_operation");

                    b.Property<int?>("IdPreviousTransaction")
                        .HasColumnType("int")
                        .HasColumnName("id_previous_transaction");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("transaction_number");

                    b.HasKey("Id");

                    b.HasIndex("IdAccountingEntry");

                    b.HasIndex("IdOperation");

                    b.HasIndex("IdPreviousTransaction")
                        .IsUnique()
                        .HasFilter("[id_previous_transaction] IS NOT NULL");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("Budget.Domain.Entities.PaymentDatePeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("final_date");

                    b.Property<int>("IdCashFlowFixed")
                        .HasColumnType("int")
                        .HasColumnName("id_cash_flow_fixed");

                    b.Property<int>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("id_state");

                    b.Property<DateTime>("InitDate")
                        .HasColumnType("datetime")
                        .HasColumnName("init_date");

                    b.Property<string>("PaymentDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("payment_date");

                    b.HasKey("Id");

                    b.HasIndex("IdCashFlowFixed");

                    b.HasIndex("IdState");

                    b.ToTable("PaymentDatePeriods");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Periodicity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("AmountPay")
                        .HasColumnType("tinyint")
                        .HasColumnName("amount_pay");

                    b.Property<byte>("AmountPayYear")
                        .HasColumnType("tinyint")
                        .HasColumnName("amount_pay_year");

                    b.Property<byte>("DayUnit")
                        .HasColumnType("tinyint")
                        .HasColumnName("day_unit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("description");

                    b.Property<int>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("id_state");

                    b.Property<bool>("IsFixedInterval")
                        .HasColumnType("bit")
                        .HasColumnName("is_fixed_intervar");

                    b.Property<byte>("MonthUnit")
                        .HasColumnType("tinyint")
                        .HasColumnName("month_unit");

                    b.HasKey("Id");

                    b.HasIndex("IdState");

                    b.ToTable("Periodicities");
                });

            modelBuilder.Entity("Budget.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("description");

                    b.Property<string>("Serie")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("serie");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Spent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<int>("IdFinancialProduct")
                        .HasColumnType("int")
                        .HasColumnName("id_financial_product");

                    b.Property<int>("IdOperation")
                        .HasColumnType("int")
                        .HasColumnName("id_operation");

                    b.Property<int>("IdSpentDetail")
                        .HasColumnType("int")
                        .HasColumnName("id_spent_detail");

                    b.Property<int>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("id_state");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("transaction_number");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("IdFinancialProduct");

                    b.HasIndex("IdOperation");

                    b.HasIndex("IdSpentDetail");

                    b.HasIndex("IdState");

                    b.HasIndex("IdUser");

                    b.ToTable("Spents");
                });

            modelBuilder.Entity("Budget.Domain.Entities.SpentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<int>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("id_state");

                    b.HasKey("Id");

                    b.HasIndex("IdState");

                    b.ToTable("SpentCategories");
                });

            modelBuilder.Entity("Budget.Domain.Entities.SpentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<int>("IdSpentCategory")
                        .HasColumnType("int")
                        .HasColumnName("id_spent_category");

                    b.Property<int>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("id_state");

                    b.HasKey("Id");

                    b.HasIndex("IdSpentCategory");

                    b.HasIndex("IdState");

                    b.ToTable("SpentDetail");
                });

            modelBuilder.Entity("Budget.Domain.Entities.State", b =>
                {
                    b.Property<int>("IdState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_state");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdState"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdState");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Budget.Domain.Entities.TransactionFixed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("description");

                    b.Property<int>("IdCashFlowFixed")
                        .HasColumnType("int")
                        .HasColumnName("id_cash_flow_fixed");

                    b.Property<int>("IdOperation")
                        .HasColumnType("int")
                        .HasColumnName("id_operation");

                    b.Property<int>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("id_state");

                    b.HasKey("Id");

                    b.HasIndex("IdCashFlowFixed");

                    b.HasIndex("IdOperation")
                        .IsUnique();

                    b.HasIndex("IdState");

                    b.ToTable("TransactionFixeds");
                });

            modelBuilder.Entity("Budget.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("dni");

                    b.Property<string>("DNIType")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("dni_type");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<int>("State")
                        .HasColumnType("int")
                        .HasColumnName("id_state");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Budget.Domain.Entities.UserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("claim_value");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("account_number");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("balance");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("DNI");

                    b.Property<int>("IdBank")
                        .HasColumnType("int")
                        .HasColumnName("id_bank");

                    b.Property<int>("IdFinancialProd")
                        .HasColumnType("int")
                        .HasColumnName("id_financial_prod");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("IdBank");

                    b.HasIndex("IdFinancialProd");

                    b.HasIndex("IdUser");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Bank", b =>
                {
                    b.HasOne("Budget.Domain.Entities.State", "State")
                        .WithMany("Banks")
                        .HasForeignKey("IdState")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Budget.Domain.Entities.CashFlowFixed", b =>
                {
                    b.HasOne("Budget.Domain.Entities.IncomeCategory", "IncomeCategory")
                        .WithMany("CashFlowFixeds")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.SpentDetail", "SpentDetail")
                        .WithMany("CashFlowFixeds")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("IdOperation")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("IdState")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.User", "User")
                        .WithMany("CashFlowFixeds")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.Periodicity", "Periodicity")
                        .WithMany("CashFlowFixeds")
                        .HasForeignKey("Idperiodicity")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.SpentCategory", null)
                        .WithMany("CashFlowFixeds")
                        .HasForeignKey("SpentCategoryId");

                    b.Navigation("IncomeCategory");

                    b.Navigation("Operation");

                    b.Navigation("Periodicity");

                    b.Navigation("SpentDetail");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.Domain.Entities.FinancialProduct", b =>
                {
                    b.HasOne("Budget.Domain.Entities.AccountingEntry", "AccountingEntry")
                        .WithMany("FinancialProducts")
                        .HasForeignKey("IdAccountingEntry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.State", "State")
                        .WithMany("FinancialProducts")
                        .HasForeignKey("IdState")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountingEntry");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Income", b =>
                {
                    b.HasOne("Budget.Domain.Entities.FinancialProduct", "FinancialProduct")
                        .WithMany("Incomes")
                        .HasForeignKey("IdFinancialProduct")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.IncomeCategory", "IncomeCategory")
                        .WithMany("Incomes")
                        .HasForeignKey("IdIncomeCategory")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.Operation", "Operation")
                        .WithMany("Incomes")
                        .HasForeignKey("IdOperation")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.State", "State")
                        .WithMany("Incomes")
                        .HasForeignKey("IdState")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.User", "User")
                        .WithMany("Incomes")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FinancialProduct");

                    b.Navigation("IncomeCategory");

                    b.Navigation("Operation");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.Domain.Entities.IncomeCategory", b =>
                {
                    b.HasOne("Budget.Domain.Entities.State", "State")
                        .WithMany("IncomeCategories")
                        .HasForeignKey("IdState")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Movement", b =>
                {
                    b.HasOne("Budget.Domain.Entities.AccountingEntry", "AccountingEntry")
                        .WithMany("Movements")
                        .HasForeignKey("IdAccountingEntry")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.Operation", "Operation")
                        .WithMany("Movements")
                        .HasForeignKey("IdOperation")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.Movement", "MovementPrevious")
                        .WithOne()
                        .HasForeignKey("Budget.Domain.Entities.Movement", "IdPreviousTransaction")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccountingEntry");

                    b.Navigation("MovementPrevious");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Budget.Domain.Entities.PaymentDatePeriod", b =>
                {
                    b.HasOne("Budget.Domain.Entities.CashFlowFixed", "CashFlowFixed")
                        .WithMany("PaymentDatePeriods")
                        .HasForeignKey("IdCashFlowFixed")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("IdState")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CashFlowFixed");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Periodicity", b =>
                {
                    b.HasOne("Budget.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("IdState")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Budget.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Budget.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Spent", b =>
                {
                    b.HasOne("Budget.Domain.Entities.FinancialProduct", "FinancialProduct")
                        .WithMany("Spents")
                        .HasForeignKey("IdFinancialProduct")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.Operation", "Operation")
                        .WithMany("Spents")
                        .HasForeignKey("IdOperation")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.SpentDetail", "SpentDetail")
                        .WithMany("Spents")
                        .HasForeignKey("IdSpentDetail")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.State", "State")
                        .WithMany("Spents")
                        .HasForeignKey("IdState")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.User", "User")
                        .WithMany("Spents")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FinancialProduct");

                    b.Navigation("Operation");

                    b.Navigation("SpentDetail");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.Domain.Entities.SpentCategory", b =>
                {
                    b.HasOne("Budget.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("IdState")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Budget.Domain.Entities.SpentDetail", b =>
                {
                    b.HasOne("Budget.Domain.Entities.SpentCategory", "SpentCategory")
                        .WithMany("SpentDetails")
                        .HasForeignKey("IdSpentCategory")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.State", "State")
                        .WithMany("SpentDetails")
                        .HasForeignKey("IdState")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SpentCategory");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Budget.Domain.Entities.TransactionFixed", b =>
                {
                    b.HasOne("Budget.Domain.Entities.CashFlowFixed", "CashFlowFixed")
                        .WithMany("TransactionFixeds")
                        .HasForeignKey("IdCashFlowFixed")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.Income", "Income")
                        .WithOne("TransactionFixed")
                        .HasForeignKey("Budget.Domain.Entities.TransactionFixed", "IdOperation")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.Spent", "Spent")
                        .WithOne("TransactionFixed")
                        .HasForeignKey("Budget.Domain.Entities.TransactionFixed", "IdOperation")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("IdState")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CashFlowFixed");

                    b.Navigation("Income");

                    b.Navigation("Spent");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Budget.Domain.Entities.UserClaims", b =>
                {
                    b.HasOne("Budget.Domain.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("Budget.Domain.Entities.Bank", "Bank")
                        .WithMany("Wallets")
                        .HasForeignKey("IdBank")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.FinancialProduct", "FinancialProduct")
                        .WithMany("FinancialProductUsers")
                        .HasForeignKey("IdFinancialProd")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budget.Domain.Entities.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("FinancialProduct");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.Domain.Entities.AccountingEntry", b =>
                {
                    b.Navigation("FinancialProducts");

                    b.Navigation("Movements");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Bank", b =>
                {
                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Budget.Domain.Entities.CashFlowFixed", b =>
                {
                    b.Navigation("PaymentDatePeriods");

                    b.Navigation("TransactionFixeds");
                });

            modelBuilder.Entity("Budget.Domain.Entities.FinancialProduct", b =>
                {
                    b.Navigation("FinancialProductUsers");

                    b.Navigation("Incomes");

                    b.Navigation("Spents");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Income", b =>
                {
                    b.Navigation("TransactionFixed")
                        .IsRequired();
                });

            modelBuilder.Entity("Budget.Domain.Entities.IncomeCategory", b =>
                {
                    b.Navigation("CashFlowFixeds");

                    b.Navigation("Incomes");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Operation", b =>
                {
                    b.Navigation("Incomes");

                    b.Navigation("Movements");

                    b.Navigation("Spents");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Periodicity", b =>
                {
                    b.Navigation("CashFlowFixeds");
                });

            modelBuilder.Entity("Budget.Domain.Entities.Spent", b =>
                {
                    b.Navigation("TransactionFixed")
                        .IsRequired();
                });

            modelBuilder.Entity("Budget.Domain.Entities.SpentCategory", b =>
                {
                    b.Navigation("CashFlowFixeds");

                    b.Navigation("SpentDetails");
                });

            modelBuilder.Entity("Budget.Domain.Entities.SpentDetail", b =>
                {
                    b.Navigation("CashFlowFixeds");

                    b.Navigation("Spents");
                });

            modelBuilder.Entity("Budget.Domain.Entities.State", b =>
                {
                    b.Navigation("Banks");

                    b.Navigation("FinancialProducts");

                    b.Navigation("IncomeCategories");

                    b.Navigation("Incomes");

                    b.Navigation("SpentDetails");

                    b.Navigation("Spents");
                });

            modelBuilder.Entity("Budget.Domain.Entities.User", b =>
                {
                    b.Navigation("CashFlowFixeds");

                    b.Navigation("Incomes");

                    b.Navigation("Spents");

                    b.Navigation("UserClaims");

                    b.Navigation("Wallets");
                });
#pragma warning restore 612, 618
        }
    }
}
